
# In[1]:
##import libraries (basic packages)
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels 

##import libraries (ML packages)
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score, StratifiedKFold
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer

# In[2]:
##Importing dataset
##WE WILL NEED TO DISCUSS WITH SHEENA HOW TO SET YOUR DIRECTORY TO PNU WOLFSON WITHIN THE PYTHON ENVIRONMENT
data = 'C:/datasets/adni_data.csv'
df = pd.read_csv(data)

##Preview dataset
df.head()        # First 5 rows
df.tail()        # Last 5 rows
df.sample(5)     # Random 5 rows

# In[3]:
##check data shape and info
df.shape         # (rows, columns)
df.columns       # Column names
df.info()        # Data types & non-null counts
df.dtypes        # Just data types

# In[4]:
##find missing data
df.isnull().sum()        # Total missing per column
df.isnull().mean()*100   # % of missing per column
df[df.isnull().any(axis=1)]  # Rows with missing values

##BASED ON THESE VALUES WE WILL DETERMINE WHETHER ANY FURTHER ACTION IS REQUIRED (e.g. dropping rows with NaN)



# In[5]:
#Understand the visit index count (screening/bl)
data['VISCODE'].value_counts()

#Count the number of entries per participant (RID)
dara['RID'].value_counts()

#Include only adni baseline visits 
#step 1: filter entries with VISCODE sc
adni = adni[adni['VISCODE']== 'sc' ]

#Display the data for a specific participan ID
specific_participant_ID = RID12345
print(adni[adni['RID']== specific_participant_ID])


# In[6]:
## Summarise Numeric Data
df.describe()     # count, mean, std, min, max, quartiles


# In[7]
##distribution of data - baseline characteristics / identify outliers 
#histogram 
#box plot 


#turning categorical variables into factors/numerical




# In[8]:
##physical examination domains

##Total number of abnormal neurological examination domains 


## BMI
VSWEIGHT=float(input())
VSHEIGHT=float(input())
bmi = VSWEIGHT/(VSHEIGHT)**2

if bmi<18.5:
    print("Underweight")
elif bmi>=18.5 and bmi<25:
    print("Normal")
elif bmi>=25 and bmi<30:
    print("Overweight")
else:
    print("Obesity")

## MAP
VSBPSYS=float(input))
VSBPDIA=float(input))
MAP = (VSBPSYS + 2(VSBPDIA))/3




